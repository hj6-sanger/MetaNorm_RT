#Position weight matrix generated using PCAWG data
#	A	C	G	T
#1	0.844064263	0.013796909	0.081003189	0.061135639
#2	0.023546726	0.139931322	0.076649497	0.759872455
#3	0.855898945	0.010363012	0.105040471	0.028697572
#5	0.832045622	0.021155261	0.094186902	0.052612215
#4	0.728108904	0.023730684	0.197142507	0.051017905


library(Biostrings)
library(BSgenome.Hsapiens.UCSC.hg38)

#running matchPWM with the PWM with default settings
m <- matchPWM(pwm, Hsapiens)
write.table(m,"out.txt",sep="\t")

#Read the output from matchPWM and convert the output to bed format to run "bedtools". 

f=open('out.txt')
g=open('bed-out.txt','w')

fline = f.readline()
fline = f.readline()
while fline :
        fline = fline.strip()
        fline = fline.replace('"','')
        fso = fline.split('\t')
        g.write(fso[1] + '\t' + fso[2] + '\t' + fso[3] + '\t' + fso[5] + '\n')
        fline = f.readline()
f.close()
g.close()

#Run bedtools to remove sites that overlap those masked by RepeatMasker.
bedtools intersect -a bed-out.txt -b repeatmasker38 -v > no_overlaps.bed

#Annotate replication timing using bedtools
bedtools intersect -a no_overlaps.bed -b replication_timing.bed > intersect.txt


#Simulation
import random
import numpy as np
f=open('intersect.txt')
fline = f.readline()
a=[]
dup=set()
while fline :
        fline = fline.strip()
        fso = fline.split('\t')
        tmp = fso[0]+'@' + fso[1]+'@' + fso[2]
        if tmp not in dup :        
                dup.add(tmp)
                #"a" array stores replication timing data
                a.append(float(fso[7]))
        fline = f.readline()
f.close()

g=open('simul_out.txt','w')

i=1
while i < 10000 :
        #randomly pick 1,403 positions
        b=random.sample(a,1403)
        # Write the average of the replication timing data of the selected positions 
        g.write(str(np.mean(b)) + '\n')
        i=i+1
g.close()
